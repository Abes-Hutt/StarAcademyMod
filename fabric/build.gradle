plugins {
    id 'com.github.johnrengelman.shadow'
    id 'org.jetbrains.kotlin.jvm' version "2.0.0"
    id 'org.jetbrains.kotlin.plugin.serialization' version '2.0.0'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"
    modImplementation "net.fabricmc.fabric-api:fabric-api:$rootProject.fabric_api_version"
    modImplementation "dev.architectury:architectury-fabric:$rootProject.architectury_api_version"
    include(implementation(annotationProcessor("com.github.bawnorton.mixinsquared:mixinsquared-fabric:0.2.0")))

    modImplementation "com.cobblemon:fabric:1.5.2+1.20.1"
    //modImplementation "maven.modrinth:enhanced-celestials:6.0.1.3-fabric"
    //modImplementation "maven.modrinth:corgilib:1.20.1-4.0.3.3-fabric"
    modImplementation "maven.modrinth:cobblemon-mass-outbreaks:fabric-1.1.4-1.20.1"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')
}

processResources {
    inputs.property 'version', project.version

    filesMatching('fabric.mod.json') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/Abes-Hutt/StarAcademyMod")
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            groupId = rootProject.maven_group
            artifactId = rootProject.archives_name.toLowerCase()
            version = "mc${rootProject.minecraft_version}-v${rootProject.mod_version}${getBuildNumber()}-${project.name}"
            from components.java
        }
    }
}

tasks.register('printVersion') {
    println "mc$rootProject.minecraft_version-v$rootProject.mod_version${getBuildNumber()}-fabric"
}

static def getBuildNumber() {
    if(System.getenv("GITHUB_RUN_NUMBER") != null) {
        return "." + System.getenv("GITHUB_RUN_NUMBER").toString()
    }

    return ""
}